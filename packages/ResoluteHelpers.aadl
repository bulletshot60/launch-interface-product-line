package ResoluteHelpers
public
	with Devices, EventHandler;

	annex Resolute {**
		Req1(self: component) <= **"type of self is " self**
			let x : {component} = reachable(self);
			if (type(self) = Devices::push_button.impl) then
				exists(d_1 : x) .
					type(d_1) = EventHandler::push_button_input_interface_thread.impl
			else
				if (type(self) = Devices::toggle.impl) then
					exists(d_2 : x) .
						type(d_2) = EventHandler::toggle_input_interface_thread.impl
				else
					if (type(self) = Devices::key_switch.impl) then
						exists(d_3 : x) .
							type(d_3) = EventHandler::key_switch_input_interface_thread.impl
					else
						false
			
		reachable(self: component) : {component} = 
			{y for (z : connections(self)) (y : get_destination_component(self, z))}
			
		get_destination_component(self: component, c: connection) : {component} = 
			if source_component(c) = self and is_port_connection(c) then
				union({destination_component(c)}, reachable(destination_component(c)))
			else 
				{}
		
	**};
	
end ResoluteHelpers;